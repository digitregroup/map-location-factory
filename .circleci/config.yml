# Define common configurations
working_directory: &working_directory
  working_directory: /tmp/app

# Filter template: only tags, release/* and hotfix/* branches
filter_only_tags_releases_hotfixes: &filter_only_tags_releases_hotfixes
  filters:
    tags:
      only: /.*/
    branches:
      only:
        - /release\/.*$/
        - /hotfix\/.*$/

# Filter template: allow all
filter_all: &filter_all
  filters:
    tags:
      only: /.*/
    branches:
      only: /.*/

# Filter template: only tags
filter_only_tags: &filter_only_tags
  filters:
    tags:
      only: /.*/
    branches:
      ignore: /.*/


# Define node build configurations
node_config: &node_config
  docker:
    - image: circleci/node:8.10
  <<: *working_directory
  parallelism: 1

# Define Terraform configurations
terraform_config: &terraform_config
  docker:
    - image: basile/terraform-aws:0.10.8
  <<: *working_directory
  parallelism: 1

# Download cached dependencies
restore_npm_cache: &restore_npm_cache
  restore_cache:
      keys:
        - node-dependencies-{{ checksum "yarn.lock" }}
        # fallback to using the latest cache if no exact match is found
        - node-dependencies-

# Save cache dependencies
save_npm_cache: &save_npm_cache
  save_cache:
    paths:
      - node_modules
    key: node-dependencies-{{ checksum "yarn.lock" }}

# Download cached workspace
restore_workspace: &restore_workspace
  attach_workspace:
    # Must be absolute path or relative path from working_directory
    at: .

# Save all actual files
save_workspace: &save_workspace
  persist_to_workspace:
    # Must be relative path from working_directory
    root: .
    # Must be relative path from root
    paths:
      - .

version: 2
jobs:
#  install_dependencies:
#    <<: *node_config
#    steps:
#      - checkout
#
#      - *restore_npm_cache
#
#      - run:
#          name: Install Node Dependencies
#          command: yarn install
#
#      - *save_npm_cache
#      - *save_workspace

#  lint:
#      <<: *node_config
#      steps:
#        - *restore_workspace
#
#        - run:
#            name: Linting using EsLint
#            command: |
#              mkdir -p ./reports
#              yarn lint:ci
#
#        - store_test_results:
#            path: ./reports
#        - store_artifacts:
#            path: ./reports

#  test:
#    <<: *node_config
#    steps:
#      - *restore_workspace
#
#      - run:
#          name: Unit tests
#          command: |
#            mkdir -p ./reports
#            yarn test:ci
#
##      - run:
##          name: Send coverage reports
##          command: yarn report-coverage
#
#      - store_test_results:
#          path: ./reports
#      - store_artifacts:
#          path: ./reports

#  check_npm_package_version:
#    <<: *node_config
#    steps:
#      - *restore_workspace
#
#      - run:
#          name: Check NPM Package Version
#          command: yarn check-version

  publish_package:
    <<: *node_config
    steps:
      - checkout

      - *restore_npm_cache

      - run:
          name: Install Node Dependencies
          command: yarn install

      - *save_npm_cache

      - run:
          name: Check NPM Package Version
          command: yarn check-version

      - run:
          name: Deploy package to NPM Registry
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
            npm publish --access public

workflows:
  version: 2
  build_and_test:
    jobs:
#      - install_dependencies:
#          <<: *filter_all

#      - lint:
#          <<: *filter_all
#          requires:
#            - install_dependencies

#      - test:
#          <<: *filter_all
#          requires:
#            - install_dependencies

#      - check_npm_package_version:
#          <<: *filter_only_tags_releases_hotfixes
#          requires:
#            - install_dependencies

      - publish_package:
          <<: *filter_only_tags
#          requires:
#            - lint
#            - test
#            - check_npm_package_version
